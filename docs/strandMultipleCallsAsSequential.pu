@startuml
title strand multiple async calls for force sequential execution
!pragma teoz true
actor AsyncActorA
actor AsyncActorB

ref over InterfaceScheduler, ServiceImpl1, ServiceImpl2: registeration of service

AsyncActorA -> InterfaceScheduler : interfaceCall("serviceA",strand = "strandA")
InterfaceScheduler -> AsyncWorker1 : doJob(actionA, onDoneA)
activate AsyncWorker1 #Yellow

AsyncActorA -> InterfaceScheduler : interfaceCall("serviceX")
InterfaceScheduler -> AsyncWorker2 : doJob(actionX, onDoneX)
activate AsyncWorker2 #Blue

AsyncActorB -> InterfaceScheduler : interfaceCall("serviceB",strand = "strandA")
InterfaceScheduler -> AsyncWorker1 : doJob(actionB, onDoneB)

AsyncWorker1 -> AsyncWorker1: actionA()
& AsyncWorker1 --> ServiceImpl1 : do real action A

& AsyncWorker2 -> AsyncWorker2 : actionX()

AsyncWorker1 -> AsyncWorker1: onDoneA()
& AsyncWorker1 --> AsyncActorA : A done
note over AsyncActorA, AsyncActorB
    actionB and onDoneB only happens
     after actionA and onDoneA
end note

AsyncWorker1 -> AsyncWorker1: actionB()
& AsyncWorker1 --> ServiceImpl2 : do real action B

& AsyncWorker2 -> AsyncWorker2 : onDoneX()
note over AsyncActorA #FFAAAA 
    Possible concurrent data access in
    for X done, may interleave with
    onDoneA 
end note

AsyncWorker2 --> AsyncActorA : X done

AsyncWorker1 -> AsyncWorker1: onDoneB()
AsyncWorker1 --> AsyncActorB : B done

deactivate AsyncWorker1
deactivate AsyncWorker2
@enduml